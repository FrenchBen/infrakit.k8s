// Code generated by go-bindata.
// sources:
// ssl/init-ssl
// ssl/init-ssl-ca
// DO NOT EDIT!

package kubernetes

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sslInitSsl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x55\x7b\x4f\xe3\x38\x10\xff\xdf\x9f\x62\x36\x44\x02\xa4\x26\x7d\xc0\xde\x83\xdd\xa2\xcb\x76\x03\x42\xc7\x06\xd4\x94\x93\x4e\x5c\x85\x4c\x32\x69\x7d\xa4\x4e\xcf\x76\x80\x1e\xf0\xdd\x77\x9c\xa4\x29\x6f\xd4\x36\x33\xbf\xf1\x6f\xc6\xf3\xca\xd6\xa7\x6e\xa9\x55\xf7\x5a\xc8\x2e\xca\x5b\xb8\xe6\x7a\xce\x34\x1a\xf0\x90\xb1\x2d\x48\x31\x13\x12\x21\x2f\x12\x6e\x44\x21\xa1\xc8\xa0\x58\xa2\xd4\x3a\x07\x3a\xc1\xd5\x0a\x16\x5c\x96\x3c\xcf\x57\xa0\x85\x4c\x10\x54\x29\xa5\x90\x33\x30\x73\xa1\xe9\xbc\x4e\x94\x58\x1a\x28\x65\x8a\x0a\xfe\xe2\x33\xc5\xa5\x81\x8c\x8b\x5c\x03\xb1\xe9\x62\x81\xa0\x57\xda\xe0\x42\xc3\x9d\x30\xf3\xa2\x34\x20\x0c\x3b\x3b\x0f\xa3\x38\x3e\x1d\xba\x3b\x77\x73\x91\xcc\xd7\x2e\x77\x19\xcb\x4a\x99\x54\x81\x94\x9a\xcf\x10\x1e\x18\xd0\x1f\x26\xf3\x02\x9c\x8b\x38\x38\x0e\x0f\xc0\xed\xc1\x57\xa2\x59\x96\xc6\x4b\x85\x3a\x84\xaf\x09\x2a\xe3\xd1\xb5\xd0\x93\x7c\x81\xa4\x18\x45\x87\x70\x19\x07\x51\xa7\xf9\x4c\x9d\x67\x2c\xf4\x7b\xcf\x17\xcb\x1c\x2b\x26\xbf\x4b\x6e\xbb\x70\x57\xa8\x1b\x8a\xff\xa6\xbc\x46\xaf\x79\x3e\x39\xf7\xfb\xc3\xfe\xe0\x57\xbf\x47\xff\xfd\x0e\x89\x83\x61\xbf\x57\x4b\x0e\x7b\x62\x4c\x64\x70\x09\xde\xff\xe0\xb8\x7d\x07\xa6\xf0\xf8\xb8\x16\x07\x2f\xc5\x3d\x12\xbf\x50\xba\x50\x56\x51\x54\xf7\xaa\xe3\xb9\x17\x06\xfa\x2c\x13\x8c\x9d\x5d\x4c\xbe\x9f\x8c\x87\x96\x8a\x8d\xc2\xf1\xe4\x5b\x10\x87\x43\xcb\xc4\x46\xd1\xd0\x52\x30\xba\x46\x4c\x4f\xfb\x4e\xe3\xf8\x13\x78\x29\xb8\xf5\xb9\x17\xfc\xf5\x2d\xc3\xf1\xf8\x6c\x7c\x00\x75\x9e\x80\xf2\x84\x89\x29\xa8\x98\x69\x81\x1a\x64\x61\xac\x73\x6d\x0e\x60\x4d\xe1\xbc\x13\xd1\xd1\xc9\xa9\x0d\xa2\x36\xe8\xba\xa3\xc8\x37\x5c\xad\xfd\x7b\x19\x54\x90\x35\xb2\x17\xdc\xf8\xb7\x1c\xbd\x8a\x63\x14\x1d\x5d\x4d\xc2\x1f\xe7\xa7\xc1\x84\x88\xd8\xa5\xc2\xff\xa6\x8c\xbe\xae\xf0\xde\x50\xbd\xa9\xca\x1a\x86\x70\xbb\x77\x45\x3a\x96\x52\x3c\xd4\x57\xa5\xd0\x73\x4c\xaf\x6c\x25\x09\xb3\xc6\x6f\x01\x56\x51\xbd\x03\x4c\x09\x69\xf8\x60\xca\xa8\x25\x44\x32\x22\x27\x46\x71\x21\x8d\xf5\x35\x0a\x0e\x8e\x82\xd3\x38\x64\x37\xb8\xba\xa8\x1a\x6c\x48\xd9\x90\x63\x5c\x96\xa9\xa8\x06\xa0\x43\xc9\x9a\x09\xc3\xf3\x58\xcc\x24\x37\xa5\xc2\x0e\x90\x71\x28\x13\xb1\x9c\xa3\x5a\xa0\x34\x4c\x97\xd7\xff\x52\x3e\x83\xdc\x44\x75\x98\x7f\xf0\xdc\x54\x01\x68\x0a\xa0\x7d\x9e\xb2\xef\x51\xec\xf7\x09\xb7\x7d\xa5\x24\x1a\xc2\xad\x6a\xf0\x42\xe5\xd3\x08\xf2\x32\x37\x15\xb4\xf7\x2e\xe4\xeb\xdb\xa4\x82\xf7\x3f\x84\xfd\x24\x2f\x69\xcc\x94\x6f\x27\x39\x67\x0e\xab\xfb\xe0\x18\x25\x2a\x6e\xd3\x04\x34\x6f\xc0\x95\x11\x19\x4f\x28\x17\x42\x6e\x4a\x4f\x95\x3a\x8b\x8e\x4e\x8e\x5f\x17\xbc\x69\x44\x8f\xd2\xe9\x27\x32\xa3\x66\x0c\x5e\x9a\x24\xdc\x5f\xe2\xc2\xea\xff\x0c\xff\x7e\x0d\x79\x94\xb6\x1a\x7e\x03\x6e\xa8\x5b\x9b\x51\x3c\xfe\xc0\xc6\x4f\x34\x75\xdd\x79\xf8\xe3\x23\xbc\x3a\x6f\xaf\x30\x09\xa3\x89\x1d\x92\x87\x3a\xce\x27\x70\x1f\x1a\xd7\xf6\xb1\x61\x78\xb2\xf7\xdd\x82\x20\x4d\x81\x66\x4a\x83\x29\xda\x85\x97\x14\x32\x13\xb3\x26\x73\xee\xf3\xee\x75\x77\x2a\xa5\x6b\xa7\x10\x1e\xc1\x28\xd8\xee\x6c\xc3\xf6\x3f\x72\x7b\xd7\x81\x43\x6b\xdc\x26\x90\xe8\xdd\x66\xbd\xc1\x0c\xa5\xd2\x1c\x3c\xbb\xf5\x1c\xb7\x89\xc5\x81\x41\x6f\xff\xb7\x8d\x91\x6d\x56\x4f\xe2\x1d\xd8\x64\x3c\x37\x6b\x8e\x35\x99\x21\xd9\xf6\x1d\x38\x5d\x5a\x09\x14\x1c\xc9\x75\xbc\xaf\xbc\xb7\xbc\xf7\x9f\x7b\xbf\x83\x57\xb1\x53\xb1\x9f\xf3\x8c\x02\x2b\x06\xad\x54\xfb\x6d\x8b\x58\xe9\x12\x85\x9c\x5a\x0c\x95\xe0\xf9\x3a\x92\x26\x83\x84\xa7\x7c\xa5\x61\xef\x97\xcf\xf4\x12\xd9\x8c\x72\x33\x78\x56\x95\x89\x1c\x5f\x67\x85\x96\x07\x85\x9c\xc1\x7a\x6b\x90\x97\x76\x81\xb9\x3b\x59\xa1\x00\xb2\xaa\x2d\xd7\x95\xfc\x92\x16\xb0\x54\x34\xb9\x76\xd5\xec\xd8\x05\x5f\x6d\x05\x37\xdb\x05\x87\x30\x89\xf4\xba\xa8\x6b\xf5\x8d\x5e\x3f\x39\xa6\x6f\x5a\x9c\x6a\xdb\xee\xa8\xb6\xac\x0d\xbb\xc3\x7e\x06\x00\x00\xff\xff\xf3\x5e\xe0\x68\x19\x07\x00\x00")

func sslInitSslBytes() ([]byte, error) {
	return bindataRead(
		_sslInitSsl,
		"ssl/init-ssl",
	)
}

func sslInitSsl() (*asset, error) {
	bytes, err := sslInitSslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ssl/init-ssl", size: 1817, mode: os.FileMode(420), modTime: time.Unix(1478041722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sslInitSslCa = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x51\x6f\xd3\x30\x14\x85\xdf\xfd\x2b\xce\xd2\x3e\xc0\x83\x97\x16\x81\x04\x85\x22\x4d\xa3\xa0\x49\xd3\x8a\x5a\xc6\x0b\xe2\xc1\x75\x6e\x1a\xb3\xd4\x0e\xbe\x36\x6d\x40\xfc\x77\x9c\xa4\x63\x9d\x34\x3f\x24\x52\x72\xce\xf9\xce\xf5\x1d\x9d\xe5\x91\x7d\xbe\x31\x36\x27\xfb\x0b\x1b\xc5\x95\x60\x0a\x90\x24\xc4\x08\x05\x95\xc6\x12\x6a\xa7\x55\x30\xce\xc2\x95\x70\x0d\x59\xe6\x1a\xc9\xa1\x7c\x8b\x9d\xb2\x51\xd5\x75\x0b\x36\x56\x13\x7c\xb4\xd6\xd8\x2d\x42\x65\x38\xf9\x59\x7b\xd3\x04\x44\x5b\x90\xc7\x57\xb5\xf5\xca\x06\x94\xca\xd4\x8c\x94\xc6\x6e\x47\xe0\x96\x03\xed\x18\x7b\x13\x2a\x17\x03\x4c\x10\xcb\xcf\x8b\x9b\xf5\xfa\x7a\x3e\x7e\xb6\xaf\x8c\xae\xee\x91\xcf\x85\x28\xa3\xd5\x7d\x91\xc8\x6a\x4b\xf8\x23\x90\x0e\xe9\xca\x21\xbb\x5d\x5f\x7c\x5a\xcc\x30\x9e\xe0\x5d\x8a\x69\x62\x90\x85\xf1\xef\xb3\x13\x45\x7a\x1f\xd4\xae\xa9\xa9\x57\x9d\xe7\x29\x32\xd7\xea\xbc\xa1\x5d\x26\xfe\x0a\x61\x4a\x7c\x83\xfc\x8d\x6c\x3c\xcd\xf0\xfd\x6d\x1a\x81\x6c\xef\xee\x59\x43\xce\xc1\x04\x4c\x45\x69\x84\x58\xde\x7e\xf9\x70\xb5\x9a\x77\xe2\xa3\xf5\x0c\xb2\xc0\x78\xf8\xfe\xc8\x3f\xd0\x17\xab\xd5\x72\x35\xc3\xd0\x0d\xa9\x1b\xe9\xe0\xd2\x05\x16\x8e\x18\xd6\x85\x2e\x9c\xc3\x0c\xf7\x11\xd9\x13\xc4\x8f\x57\xd7\x8b\x84\x1c\x04\xff\xbb\x1f\x9b\x97\xe8\xff\x74\x9a\xae\xff\x03\xbe\x8b\x98\xf4\x11\x23\x10\x07\xb5\xa9\x0d\x57\xd0\x75\x4c\x17\xef\x71\x79\x01\x65\x0b\x30\xd5\xa5\x64\xb3\xb5\x50\xd0\xe4\x83\x18\x1f\xb7\x80\x2d\x59\xcf\x0a\xb2\x5b\xce\x09\x5b\xde\x51\xdb\xf3\xf1\x62\xf2\xf2\xf5\x83\xdc\xd3\x4f\xc8\xc3\xab\xc9\x1b\x48\x4b\xfb\xf4\x70\x45\x1a\xb0\x53\x3f\xed\x96\x85\x6a\x19\xd3\x49\x3a\x27\x8c\x61\x0a\xc9\x71\xf3\x03\x59\x7e\x79\x33\xbf\x8b\x1b\x92\x5a\xa5\x69\xc5\xbf\x00\x00\x00\xff\xff\x3b\xc0\xc4\xe4\xb3\x02\x00\x00")

func sslInitSslCaBytes() ([]byte, error) {
	return bindataRead(
		_sslInitSslCa,
		"ssl/init-ssl-ca",
	)
}

func sslInitSslCa() (*asset, error) {
	bytes, err := sslInitSslCaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ssl/init-ssl-ca", size: 691, mode: os.FileMode(420), modTime: time.Unix(1478034984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ssl/init-ssl":    sslInitSsl,
	"ssl/init-ssl-ca": sslInitSslCa,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ssl": {nil, map[string]*bintree{
		"init-ssl":    {sslInitSsl, map[string]*bintree{}},
		"init-ssl-ca": {sslInitSslCa, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
